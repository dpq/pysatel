0. PREFACE

	The PySatel (Python-Satellite) project is devoted to building a convenient framework for easy management of constellations of multiple scientific satellites, each 
	carrying multiple different instruments.

	PySatel requires the following packages to be installed:
		o mysql
		o python, python-scipy, python-mysqldb
	PySatel requires the following Python modules to be installed:
		o ephem by pyephem project http://rhodesmill.org/pyephem/
		o igrf and cxform by python-magnetosphere project https://code.google.com/p/python-magnetosphere/

1. INSTALLATION

	execute the install.sh

2. WRITING A SATELLITE PROCESSING MODULE (SPM)

	The SPM must be a Python module conforming to the following API (you can find a template telemetry file in the directory where pysatel has been downloaded):

def desc():
	res = {}
	res["id"]
	res["name"]
	res["instruments"] = {}
	res["instruments"]["instr1"] = ( "channel1", "channel2", "channel3" )
	return res

def fetch(path):
	# Download and save telemetry files for every instrument separately to path/instrument/L0/uniquesessionfilename
	res = {}
	res["instrument1"] = [ "absolute_filepath1", "absolute_filepath2", "absolute_filepath3" ]
	res["instrument2"] = [ "absolute_filepath4", "absolute_filepath5", "absolute_filepath6" ]
	return res

def parse(instrument, path):
	# Feed the file at the specified absolute path to the appropriate parser function, determined by instrument.
	# You are free to implement parser functions however you need, but the parse() function must return a specific type of result:
	return sessionId, data   # Here data is a dictionary of  { datetime : ( channel1_value, channel2_value, channel3_value ) }, and sessionId is a unique session identifier

3. USAGE

	executing from the shell
	/usr/local/lib/python2.5/site-packages/pysatel/process.py
	starts the main loop

	Further information on using pysatel can be obtained by running

		pysatel-admin help

	Thanks for visiting.
	Supposedly someday we will build proper packages, at least for RHEL and Debian.
